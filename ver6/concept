import 'arch/x86'

//when line start with '.' this insert into asm file
.section .data
    hello = 'Hello, world!\n'
    int16 num =  123
    int8 num1 = 0b01100110
    int8 num2 = 0x80
    num3 = 134.0E-2
    staticArray = {1,3,4,5}                                //default int32_t for x86-64
    array(int8 3) staticArray1 = {true,false,false}        //size 3, type int8
    array(array(int8 3) 3) XOarray
    ptr void
    //void.[idx], void.item (data from pointer equal void.[0]:dataType)

    type myType(DataType) = {
        array(DataType 16) stackPointer = 0 
        size = 16
        top = 0
    }
    myType(bool) MyVar 
.section .bss
    .align 16
    stackPtr:
    .skip 16384
    stackTop:
.section .text
    .global _start
    _start:
        _asm 'mov $stackTop, %esp'

        type string.Hello = 'Hello, World!!!\n'
        type int16 string.cnst = 67

        type myType.push = \stack:myType.\data:stack.myType.DataType->state.
            match 
            | (stack.top < stack.size) -> monad (set stack.stackPointer.[stack.top] data)
                                                (set stack.top stack.top+1)
            | other -> monad

        type myType.[] = \stack:myType.\idx: -> state.
            stack.stackPointer[idx]
        
        true = \x.\y.x
        false = \x.\y.y
        not = \x.x false true
        and = \x.\y.x y false
        or = \x.\y.x true y
        xor = \x.\y.x y false true (x true y false true) false true

        func = \f.\n:int32 -> int32.
            if n <= 2 
            then 1
            else (f f (n - 1)) + (f f (n - 2))

        print (func func 10).toString


        fib1 = \f.\n:int32 -> int32.
            match
            | (n = 1) -> 1
            | (n = 2) -> 1
            | other -> (f f (n - 1)) + (f f (n - 2))

        monad~_asm '
            movl $4 %eax
            movl $1 %ebx
            movl hello ecx
            movl hello.length %edx
            int $0x80
        '

        print = \x:string -> state.
            monad~_asm '
                movl $4 %eax
                movl $1 %ebx
                movl x %ecx
                movl x.length %edx
                int $0x80
            '