#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul  4 00:17:41 2020

@author: lune
"""

parser = '''
P_START = N_nln lLines N_nln N_NONE
lLines = lLine lLines | empty
lLine = P_typeDec | P_adtDec | P_Dec


P_typeDec = N_type T_word N_is T_word lWordList NN_nln
lWordList = T_word lWordList | empty

P_adtDec = N_type T_word N_is NN_nln P_adtLine adtDecLines
adtDecLines = P_adtLine adtDecLines | empty
P_adtLine = T_word _adtLine NN_nln
_adtLine = N_AR T_word lWordList | empty

P_Dec = T_word N_is N_nln P_optionDec N_nln _P_decLines N_nln
P_optionDec = T_binary | empty

_P_decLines = P_expr NN_nln _decLines
_decLines = P_expr NN_nln _decLines | empty

P_expr = _exprs
_exprs = _expr N_sl _exprs | _expr
_expr = T_word | P_constant | P_lambda | N_os N_nln P_expr N_nln N_cs
P_constant = T_number | T_literal
P_lambda = N_Lambda P_args N_AR P_expr
P_args = arg _args
_args = arg _args | empty
arg = _arg | N_os arg _args N_cs
_arg = T_word | P_constant

N_Lambda = T_LAMBDA
N_nln = T_nln N_nln | empty
NN_nln = T_nln N_nln
N_is = T_is
N_type = T_type
N_AR = T_RIGHT_ARROW
N_os = T_OPEN_S
N_cs = T_CLOSE_S
N_oc = T_OPEN_C
N_cc = T_CLOSE_C
N_oi = T_OPEN_I
N_ci = T_CLOSE_I
N_sem = T_SEM
N_NONE = T_NONE
N_sl = T_slash N_nln | empty
'''
#_opers = T_MINUS | T_PLUS | T_MULT | T_DIVS | T_SHIFT | T_ORD | T_EQ | T_AND | T_XOR | T_OR | T_NOT

fout = open('myFP.py','w');

fout.write('''

import sys
import myFL as lexer

def empty(d,p):
    return (d,p)

def term(t):
    def parser(d,p):
        if p[0][0] == t:
            return (d+[p[0]],p[1:])
        return (None,[(t,'',0)]+p[1:])
    return parser


def notTerm(c,pp):
	def parser(d,p):
		d1,p1 = pp([],p)
		if d1 == None:
			return (None,p1)
		return (d+[[c,d1]],p1)
	return parser

def notSaveTerm(c,pp):
    def parser(d,p):
        d1,p1 = pp([],p)
        if d1 == None:
            return (None,p1)
        return (d,p1)
    return parser

def app(a,b):
    def parser(d,p):
        d1,p1 = a([],p)
        if d1 == None:
            return (None,p1)
        d2,p2 = b(d1,p1)
        if d2 == None:
            return (None,p2)
        return (d+d2,p2)
    return parser

def par(a,b):
    def parser(d,p):
        d1,p1 = a([],p)
        if d1 != None:
            return (d+d1,p1)
        d2,p2 = b([],p)
        if d2 != None:
            return (d+d2,p2)
        return (None,p1)
    return parser

def mor(l):
    if l == []:
        return empty
    elif len(l) == 1:
        return l[0]
    return par(l[0],mor(l[1:]))

def serial(l):
    if l == []:
        return empty
    elif len(l) == 1:
        return l[0]
    return app(l[0],serial(l[1:]))

''')

idx = 1
listOfParserTokens = []
def genParser(s):
    if s == '':
        return
    global idx
    ss = s.split('=')
    s1 = ss[0].split()[0]
    fout.write('def '+s1+'(d,p):\n')
    fout.write('\td1,p1 = mor([\n')
    for k in ss[1].split('|'):
        fout.write('\t\tserial([\n')
        for l in k.split():
            if l[0] == 'T':
                fout.write('\t\t\tterm(lexer.t' + l + '),\n')
            else:
                fout.write('\t\t\t'+l+',\n')
        fout.write('\t\t]),\n')
    fout.write('\t])(d,p)\n')
    fout.write('\treturn (d1,p1)\n')
    if s1[0] == 'P':
        listOfParserTokens.append(s1)
        fout.write(s1 + ' = notTerm('+str(idx)+','+s1+')\n')
        idx+=1
    if s1[0] == 'N':
        fout.write(s1 + ' = notSaveTerm('+str(idx)+','+s1+')\n')
list(map(genParser,parser[1:-1].split('\n')))

fout.write('sys.setrecursionlimit(2**10*2**16)\n')

fout.write('\n')
for k in range(len(listOfParserTokens)):
    fout.write('p'+listOfParserTokens[k] + ' = '+str(k+1)+'\n')

fout.close()